import vapoursynth as vs
import mvmulti
import math

### Shared ###
def gauss (src, p=30):
    core   = vs.get_core ()
    upsmp  = core.fmtc.resample (src, src.width * 2, src.height * 2, kernel="gauss", a1=100, fulls=True, fulld=True)
    clip   = core.fmtc.resample (upsmp, src.width, src.height, kernel="gauss", a1=p, fulls=True, fulld=True)
    return clip

def padding (src, left=0, right=0, top=0, bottom=0):
    core   = vs.get_core ()
    w      = src.width
    h      = src.height
    clip   = core.fmtc.resample (src, w+left+right, h+top+bottom, -left, -top, w+left+right, h+top+bottom, kernel="point", fulls=True, fulld=True)
    return clip

def xymax (src1, src2):
    core   = vs.get_core ()
    clip   = core.std.Expr ([src1, src2], ["x y max"])
    return clip

def xymin (src1, src2):
    core   = vs.get_core ()
    clip   = core.std.Expr ([src1, src2], ["x y min"])
    return clip

def max_dif (src1, src2, ref):
    core = vs.get_core ()
    clip = core.std.Expr ([src1, src2, ref], ["x z - abs y z - abs > x y ?"])
    return clip

def min_dif (src1, src2, ref):
    core = vs.get_core ()
    clip = core.std.Expr ([src1, src2, ref], ["x z - abs y z - abs > y x ?"])
    return clip

def thr_merge (flt, src, ref=None, thr=0.0009765625, elast=None):
    core  = vs.get_core ()
    ref   = src if ref is None else ref
    elast = thr / 2 if elast is None else elast
    BExp  = ["x {thr} {elast} + z - 2 {elast} * / * y {elast} z + {thr} - 2 {elast} * / * +".format (thr=thr, elast=elast)]
    BDif  = core.std.Expr (src, "0.0")
    PDif  = core.std.Expr ([flt, src], "x y - 0.0 max")
    PRef  = core.std.Expr ([flt, ref], "x y - 0.0 max")
    PBLD  = core.std.Expr ([PDif, BDif, PRef], BExp)
    NDif  = core.std.Expr ([flt, src], "y x - 0.0 max")
    NRef  = core.std.Expr ([flt, ref], "y x - 0.0 max")
    NBLD  = core.std.Expr ([NDif, BDif, NRef], BExp)
    BLDD  = core.std.Expr ([PBLD, NBLD], ["x y - 0.5 +"])
    BLD   = core.std.MergeDiff (src, BLDD)
    UDN   = core.std.Expr ([flt, ref, BLD], ["x y - abs {thr} {elast} - > z x ?".format (thr=thr, elast=elast)])
    clip  = core.std.Expr ([flt, ref, UDN, src], ["x y - abs {thr} {elast} + < z a ?".format (thr=thr, elast=elast)])
    return clip

def clamp (src, bright_limit, dark_limit, overshoot=0.0, undershoot=0.0):
    core = vs.get_core ()
    clip = core.std.Expr ([src, bright_limit, dark_limit], ["x y {os} + > y {os} + x ? z {us} - < z {us} - x ?".format (os=overshoot, us=undershoot)])
    return clip

def maxmulti (src, start=None, a=2, tr=6):
    core   = vs.get_core ()
    start  = xymax (core.std.SelectEvery (src, tr*2+1, 0), core.std.SelectEvery (src, tr*2+1, 1)) if start is None else start
    max    = xymax (start, core.std.SelectEvery (src, tr*2+1, a))
    a      = a+1
    clip   = max if a == tr*2+1 else maxmulti (src, start=max, tr=tr, a=a)
    return clip

def minmulti (src, start=None, a=2, tr=6):
    core   = vs.get_core ()
    start  = xymin (core.std.SelectEvery (src, tr*2+1, 0), core.std.SelectEvery (src, tr*2+1, 1)) if start is None else start
    min    = xymin (start, core.std.SelectEvery (src, tr*2+1, a))
    a      = a+1
    clip   = min if a == tr*2+1 else minmulti (src, start=min, tr=tr, a=a)
    return clip

### Denoise ###
def ringnr (src, a=4, h=6.4, divide=4):
    core    = vs.get_core ()
    hfine   = h * (divide - 1) / divide
    hfiner  = hfine * 2 / divide
    den     = divide - 1
    pad     = padding (src, a+1, a+1, a+1, a+1)
    ref     = core.knlm.KNLMeansCL (pad, d=0, a=a, s=1, h=h)
    init    = core.knlm.KNLMeansCL (pad, d=0, a=a, s=1, h=hfine, rclip=ref)
    def inline (flt, n):
        str = n * hfine / den + hfiner * (1 - n / den)
        flt = init if n == (divide - 1) else flt
        dif = core.std.MakeDiff (pad, flt)
        dif = core.knlm.KNLMeansCL (dif, d=0, a=a, s=1, h=str, rclip=flt)
        fnl = core.std.MergeDiff (flt, dif)
        n   = n - 1
        return fnl if n == -1 else inline (fnl, n)
    Final   = inline (None, divide - 1)
    clip    = core.std.CropRel (Final, a+1, a+1, a+1, a+1)
    return clip

def tringnr (src, pelclip=None, a=4, h=9.6, tr=3, pel=4, dct=5, thsad=2000, thscd1=10000, thscd2=255):
    core    = vs.get_core ()
    sup     = core.mvsf.Super (src, pel=pel, chroma=False, hpad=32, vpad=32, pelclip=pelclip, sharp=2, rfilter=4, levels=0)
    vmulti  = mvmulti.Analyze (sup, overlap=2, blksize=4, search=3, chroma=False, truemotion=True, tr=tr, trymany=True, dct=dct, levels=0, divide=0, badrange=-24)
    clean   = mvmulti.DegrainN (src, sup, vmulti, tr=tr, thsad=thsad, thscd1=thscd1, thscd2=thscd2, plane=0, limit=1.0)
    rep     = core.rgsf.Repair (clean, src, mode=17)
    dif     = core.std.MakeDiff (src, rep)
    dif     = padding (dif, a+1, a+1, a+1, a+1)
    dif     = core.knlm.KNLMeansCL (dif, d=0, a=a, s=1, h=h, rclip=padding (rep, a+1, a+1, a+1, a+1))
    dif     = core.std.CropRel (dif, a+1, a+1, a+1, a+1)
    clip    = core.std.MergeDiff (rep, dif)
    return clip
